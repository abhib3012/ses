{
  "name": "re-ontology",
  "version": "0.0.4",
  "description": "Ontology builder that saves to and loads from RethinkDB.",
  "main": "dist/Ontology.min.js",
  "scripts": {
    "test": "mocha ./spec/ontology.js"
  },
  "author": {
    "name": "James H Edwards"
  },
  "repository": {
    "url": "https://github.com/incrediblesound/ReOntology.git",
    "type": "git"
  },
  "license": "ISC",
  "dependencies": {
    "chai": "~1.8.0",
    "grunt": "^0.4.5",
    "grunt-contrib-concat": "^0.5.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-uglify": "^0.6.0",
    "lodash": "^2.4.1",
    "rethinkdb": "^1.15.0-0"
  },
  "readme": "ReOntology\n==========\n\nReOntology is a type system for JavaScript that conveniently saves to and loads from RethinkDB. To install, use npm:\n```shell\nnpm install re-ontology --save\n```\nRequiring the module exposes the following object:\n```javascript\nvar reontology = require('re-ontology');\nconsole.log(reontology) //=> { Type: {...}, Instance: {...}, db: { getInstance: {...}, getSystem: {...} } }\n```\n\nThe type system consists of a heirarchy of types that lies over a set of instances. There is a minor semantic distinction in the code which is that a type has \"features\", abstract qualities that pertain to all subtypes and instances of that type, and an instance has a \"description\" which is a set of key/value pairs that describe that actual properties of that instance.\n\nTo create an ontology you start with a base class. For now every class and instance must have a unique name, features are optional, and descriptions are necessary to perform search queries.\n```javascript\n// here is the root of our new class system //\nvar people = new Type({\n\tname: \"Person\",\n\tfeatures: {\n\t\tType: \"Human\"\n\t}\n})\n```\nTo extend a class with sub-classes use the addSubType method:\n```javascript\nvar men = people.addSubType({\n\tname: 'Male',\n\tfeatures: {\n\t\tGender: 'Male'\n\t}\n})\nvar women = people.addSubType({\n\tname: 'Female',\n\tfeatures: {\n\t\tGender: 'Female'\n\t}\n})\n```\nTo add instances to a type or a sub-type use the addInstance method:\n```javascript\nmen.addInstance({\n\tname: 'Robert',\n\tdescription: {\n\t\tfather: 'James',\n\t\tmother: 'Gladice',\n\t\tsons: ['Eric'],\n\t\tdaughters: ['Susan', 'Carol', 'Annabelle']\n\t}\n})\n\nmen.addInstance({\n\tname: 'Eric',\n\tdescription: {\n\t\tfather: 'Robert',\n\t\tmother: 'Sylvia',\n\t\tsons: ['James', 'Wendell'],\n\t\tdaughters: ['Emily']\n\t}\n})\n\nwomen.addInstance({\n\tname: 'Susan',\n\tdescription: {\n\t\tfather: 'Robert',\n\t\tmother: 'Sylvia',\n\t\tsons: null,\n\t\tdaughters: null\n\t}\n})\n\nwomen.addInstance({\n\tname: 'Samanthat',\n\tdescription: {\n\t\tfather: 'Adam',\n\t\tmother: 'Beth',\n\t\tsons: null,\n\t\tdaughters: null\n\t}\n})\n```\nNow that we have a fleshed out ontology with a root class, two subclasses and four instances, we can save it to rethinkdb:\n```javascript\n// creates a table called \"people\" in our database and saves the entire heirarchy into that table\npeople.createTable('people').then(function(){\n\tpeople.save();\n});\n```\nNow we can reconstruct the entire heirarchy from the database:\n```javascript\nvar people;\n// reconstructs a ReOntology tree starting from the root node found in the \"people\" table\ndb.getSystem('people', function(result){\n\tpeople = result;\n})\n```\nViewing Information\n-------------------\nFor now, there are two principle ways of viewing information in your ontology. The first is with the viewInstance method. Calling viewInstance on the root with the name of an instance will return an object that contains the instance data as well as the data for every class that instance belongs to.\n```javascript\npeople.viewInstance('Eric') //=> { name: \"Eric\", description: {...}, parent: { name: \"Male\"... } }\n```\nA much more interesting way to query the ontology is by using the search object. This object allows you to find instances with specific attributes or instances that share attributes with other instances. Examples of both kinds of queries follows below:\n\n```javascript\npeople.search() // this method returns a search object\n.hasType('Male') // we constrain our search to men\n.hasAttributes({father: \"James\"}, function(result){\n// hasAttributes is a terminating method so it takes a callback\n\tconsole.log(result) // logs the Robert Object\n})\n```\nFinding Eric's sisters is easy:\n```javascript\npeople.search()\n.relatedTo('Eric') // this method enables use of the sharesAttributes method\n.hasType('Female') // we want to find the women that share two attributes with Eric\n.sharesAttributes([\"father\",\"mother\"], function(result){\n\tconsole.log(result) // an array containing the Susan instance\n})\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/incrediblesound/ReOntology/issues"
  },
  "_id": "re-ontology@0.0.4",
  "_from": "re-ontology@"
}
